name: Docker Build and Push

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      image_name:
        required: true
        type: string
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      password:
        required: false
        type: string
      username:
        required: false
        type: string
      platforms:
        required: false
        type: string
        default: '["linux/amd64", "linux/arm64"]'
    secrets:
      GCR_SERVICE_ACCOUNT_KEY:
        required: false
        
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: ${{ fromJSON(inputs.platforms) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Prepare.
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU.
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx.
        uses: docker/setup-buildx-action@v3

      - name: Log in to github container registry.
        if: ${{ inputs.registry == 'ghcr.io' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to ${{ inputs.registry }} container registry.
        if: contains(inputs.registry, 'pkg.dev')
        uses: FhenixProtocol/actions/.github/actions/gcr-login@master
        with:
          service_account_key: ${{ secrets.GCR_SERVICE_ACCOUNT_KEY }}
          registry: ${{ inputs.registry }}

      - name: Extract metadata (tags, labels) Docker image.
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}

      - name: Build and push  ${{ inputs.image_name }} Docker image.
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: ${{ inputs.dockerfile }}
          tags: ${{ inputs.registry }}/${{ inputs.image_name }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to github container registry.
        if: ${{ inputs.registry == 'ghcr.io' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log in to ${{ inputs.registry }} container registry.
        if: contains(inputs.registry, 'pkg.dev')
        uses: FhenixProtocol/actions/.github/actions/gcr-login@master
        with:
          service_account_key: ${{ secrets.GCR_SERVICE_ACCOUNT_KEY }}
          registry: ${{ inputs.registry }}
          
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set tag based on trigger
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/publish/* ]]; then
            TAG="${{ github.ref_name }}"
            echo "TAG=${TAG#publish/}" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi
    
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
          tags: |
            type=raw,value=${{ steps.set-tag.outputs.TAG }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ inputs.registry }}/${{ inputs.image_name }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ inputs.registry }}/${{ inputs.image_name }}:${{ steps.meta.outputs.version }}
