name: Docker Build and Push
on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      image_name:
        required: true
        type: string
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      password:
        required: false
        type: string
      username:
        required: false
        type: string
      platforms:
        required: false
        type: string
        default: '["linux/amd64", "linux/arm64"]'
      runs_on:
        required: false
        type: string
        default: ubuntu-latest
      build_args:
        required: false
        type: string
        default: ''
    secrets:
      service_account_key:
        required: false
      git_submodule_token:
        required: false

jobs:
  build:
    runs-on: ${{ inputs.runs_on }}
    strategy:
      matrix:
        platform: ${{ fromJSON(inputs.platforms) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.git_submodule_token || github.token }}
      - name: Prepare.
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      - name: Set up QEMU.
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx.
        uses: docker/setup-buildx-action@v3
      - name: Log in to container registry.
        if: ${{ inputs.registry == 'ghcr.io' }}
        uses: FhenixProtocol/actions/.github/actions/registry-login@alon.dotan/ci/support_avx
        with:
          service_account_key: ${{ secrets.service_account_key }}
          registry: ${{ inputs.registry }}
      - name: Extract metadata (tags, labels) Docker image.
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
      - name: Build and push  ${{ inputs.image_name }} Docker image.
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: ${{ inputs.dockerfile }}
          tags: ${{ inputs.registry }}/${{ inputs.image_name }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ inputs.build_args }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}-${{ inputs.runs_on }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Push digests
        uses: FhenixProtocol/actions/.github/actions/push-digests@alon.dotan/ci/support_avx
        with:
          registry: ${{ inputs.registry }}
          image_name: "${{ inputs.image_name }}"
          service_account_key: ${{ secrets.service_account_key }}
          runs_on: ${{ inputs.runs_on }}
